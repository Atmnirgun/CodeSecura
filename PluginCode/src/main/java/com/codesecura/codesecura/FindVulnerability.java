package com.codesecura.codesecura;

import com.intellij.openapi.actionSystem.AnAction;
import com.intellij.openapi.actionSystem.AnActionEvent;
import com.intellij.openapi.actionSystem.CommonDataKeys;
import com.intellij.openapi.editor.Editor;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.ui.Messages;
import org.jetbrains.annotations.NotNull;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.util.EntityUtils;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;

public class FindVulnerability extends AnAction {
    @Override
    public void update(AnActionEvent e) {
        // Enable the action only when there is a text editor and text is selected
        Editor editor = e.getData(CommonDataKeys.EDITOR);
        e.getPresentation().setEnabledAndVisible(editor != null && editor.getSelectionModel().hasSelection());
    }

    @Override
    public void actionPerformed(@NotNull AnActionEvent e) {
        try {
            String selectedText = null;
            Project project = e.getProject();

            Editor editor = e.getDataContext().getData(com.intellij.openapi.actionSystem.PlatformDataKeys.EDITOR);
            if (editor != null) {
                selectedText = editor.getSelectionModel().getSelectedText();
            }

            // Create an HttpClient instance
            HttpClient httpClient = HttpClients.createDefault();

            String encodedPrompt = URLEncoder.encode(selectedText , StandardCharsets.UTF_8);
            // Define the URL of the API endpoint
            String url = "http://localhost:8080/bot/chat?prompt="+encodedPrompt;

            // Create an HttpGet request object
            HttpGet request = new HttpGet(url);

            // Execute the request
            HttpResponse response = httpClient.execute(request);

            // Get the response entity
            HttpEntity entity = response.getEntity();

            // Check if the response entity is not null
            if (entity != null) {
                // Convert the entity to a string
                String responseBody = EntityUtils.toString(entity);
                System.out.println(responseBody);
                // Display the response body (for demonstration, using a message dialog)
                Messages.showMessageDialog(project, responseBody.toString(), "Custom Action", Messages.getInformationIcon());
                //Messages.showMessageDialog(responseBody, "API Response", null);
            } else {
                // Handle the case when the response entity is null
                Messages.showMessageDialog("Empty response received from the API", "API Response", null);
            }
        } catch (IOException ex) {
            // Handle any exceptions
            ex.printStackTrace();
            Messages.showMessageDialog("Failed to call API: " + ex.getMessage(), "API Error", null);
        }
    }

    /*@Override
    public void actionPerformed(@NotNull AnActionEvent e) {
        try {

            String selectedText = null;

            Project project = e.getProject();
            Editor editor = e.getDataContext().getData(com.intellij.openapi.actionSystem.PlatformDataKeys.EDITOR);
            if (editor != null) {
                  selectedText = editor.getSelectionModel().getSelectedText();
            }

            System.out.println(selectedText);
            // Define the URL of the external API
            URL url = new URL("http://localhost:8080/bot/chat?prompt="+selectedText+ " find vulnerabilities in code");

            // Open a connection to the URL
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();

            // Set request method
            connection.setRequestMethod("GET");

            // Get the response code
            int responseCode = connection.getResponseCode();
            System.out.println("Response Code: " + responseCode);

            // Read the response from the API
            BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            String inputLine;
            StringBuilder response = new StringBuilder();
            while ((inputLine = in.readLine()) != null) {
                response.append(inputLine);
            }
            in.close();

            // Print the response
            System.out.println("Response: " + response.toString());

            // Display a message dialog
            if(selectedText == null || selectedText.isEmpty()){
                selectedText = "NO text selected";
            }
            Messages.showMessageDialog(project, response.toString(), "Custom Action", Messages.getInformationIcon());
            // Close the connection
            connection.disconnect();

        } catch (Exception exception) {
            exception.printStackTrace();
        }
    }*/
}
